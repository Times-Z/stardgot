name: Build and Release

on:
  push:
    branches: [main]
    tags: ["*"]
  pull_request:
    branches: [main]

env:
  GODOT_URL: "https://github.com/godotengine/godot-builds/releases/download"
  GODOT_VERSION: "4.4.1-stable"
  GODOT_PACKAGE_NAME: "Godot_v4.4.1-stable"
  GODOT_EXPORT_TEMPLATE_DIR: "4.4.1.stable.mono"
  EXPORT_NAME: "Stardgot"
  DOTNET_SDK_VERSION: "8.0"

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Cache Godot and dependencies
        uses: actions/cache@v4
        with:
          path: |
            .godot/
            .nuget/
            ~/.local/share/godot/
          key: ${{ runner.os }}-godot-${{ env.GODOT_VERSION }}-${{ hashFiles('**/*.csproj', '**/project.godot') }}
          restore-keys: |
            ${{ runner.os }}-godot-${{ env.GODOT_VERSION }}-
            ${{ runner.os }}-godot-

      - name: Download and setup Godot
        run: |
          wget -nv ${GODOT_URL}/${GODOT_VERSION}/${GODOT_PACKAGE_NAME}_mono_linux_x86_64.zip
          wget -nv ${GODOT_URL}/${GODOT_VERSION}/${GODOT_PACKAGE_NAME}_mono_export_templates.tpz

          unzip -qq ${GODOT_PACKAGE_NAME}_mono_linux_x86_64.zip
          unzip -qq ${GODOT_PACKAGE_NAME}_mono_export_templates.tpz

          mkdir -p ~/.local/share/godot/export_templates/${GODOT_EXPORT_TEMPLATE_DIR}
          mv templates/* ~/.local/share/godot/export_templates/${GODOT_EXPORT_TEMPLATE_DIR}/

          chmod +x ${GODOT_PACKAGE_NAME}_mono_linux_x86_64/${GODOT_PACKAGE_NAME}_mono_linux.x86_64

      - name: Import project and build
        run: |
          export DISPLAY=:99
          Xvfb :99 -ac -screen 0 1024x768x24 &

          ./${GODOT_PACKAGE_NAME}_mono_linux_x86_64/${GODOT_PACKAGE_NAME}_mono_linux.x86_64 --headless --import --quit

          dotnet build
          ./${GODOT_PACKAGE_NAME}_mono_linux_x86_64/${GODOT_PACKAGE_NAME}_mono_linux.x86_64 --headless --export-release "Linux" build/Linux/${EXPORT_NAME}.x86_64

      - name: Upload Linux build artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-build
          path: build/Linux/
          retention-days: 1

  build-windows:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_SDK_VERSION }}

      - name: Cache Godot and dependencies
        uses: actions/cache@v4
        with:
          path: |
            .godot/
            .nuget/
            ~/.local/share/godot/
          key: ${{ runner.os }}-godot-${{ env.GODOT_VERSION }}-${{ hashFiles('**/*.csproj', '**/project.godot') }}
          restore-keys: |
            ${{ runner.os }}-godot-${{ env.GODOT_VERSION }}-
            ${{ runner.os }}-godot-

      - name: Download and setup Godot
        run: |
          wget -nv ${GODOT_URL}/${GODOT_VERSION}/${GODOT_PACKAGE_NAME}_mono_linux_x86_64.zip
          wget -nv ${GODOT_URL}/${GODOT_VERSION}/${GODOT_PACKAGE_NAME}_mono_export_templates.tpz

          unzip -qq ${GODOT_PACKAGE_NAME}_mono_linux_x86_64.zip
          unzip -qq ${GODOT_PACKAGE_NAME}_mono_export_templates.tpz

          mkdir -p ~/.local/share/godot/export_templates/${GODOT_EXPORT_TEMPLATE_DIR}
          mv templates/* ~/.local/share/godot/export_templates/${GODOT_EXPORT_TEMPLATE_DIR}/

          chmod +x ${GODOT_PACKAGE_NAME}_mono_linux_x86_64/${GODOT_PACKAGE_NAME}_mono_linux.x86_64

      - name: Import project and build
        run: |
          export DISPLAY=:99
          Xvfb :99 -ac -screen 0 1024x768x24 &

          ./${GODOT_PACKAGE_NAME}_mono_linux_x86_64/${GODOT_PACKAGE_NAME}_mono_linux.x86_64 --headless --import --quit

          dotnet build

          ./${GODOT_PACKAGE_NAME}_mono_linux_x86_64/${GODOT_PACKAGE_NAME}_mono_linux.x86_64 --headless --export-release "Windows Desktop" build/Windows/${EXPORT_NAME}.exe

      - name: Upload Windows build artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-build
          path: build/Windows/
          retention-days: 1

  package:
    runs-on: ubuntu-latest
    needs: [build-linux, build-windows]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Linux build
        uses: actions/download-artifact@v4
        with:
          name: linux-build
          path: build/Linux/

      - name: Download Windows build
        uses: actions/download-artifact@v4
        with:
          name: windows-build
          path: build/Windows/

      - name: Create release packages
        run: |
          cd build/Linux && zip -r ../../${EXPORT_NAME}-linux.zip .
          cd ../Windows && zip -r ../../${EXPORT_NAME}-windows.zip .

      - name: Upload release packages
        uses: actions/upload-artifact@v4
        with:
          name: release-packages
          path: |
            ${{ env.EXPORT_NAME }}-linux.zip
            ${{ env.EXPORT_NAME }}-windows.zip
          retention-days: 7

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            ${{ env.EXPORT_NAME }}-linux.zip
            ${{ env.EXPORT_NAME }}-windows.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
